{"version":3,"sources":["logo.svg","components/weather.jsx","components/form.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Weather","props","className","data","city","country","icon","celsius","min","tmin","max","tmax","desc","Form","onSubmit","getW","error","name","type","placeholder","App","getWeather","e","a","preventDefault","c","target","elements","value","con","fetch","apiData","json","jdata","setState","sys","main","temp","toFixed","temp_max","temp_min","weather","description","get_WeatherIcon","weatherIcon","id","state","undefined","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.827f48be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nconst Weather = (props) => {\r\n  return (\r\n    <div className=\"container text-light\">\r\n      <div>\r\n        <h1>\r\n          {props.data.city},{props.data.country}\r\n        </h1>\r\n        <h5 className=\"py-4\">\r\n          <i className={props.data.icon}></i>\r\n        </h5>\r\n        <h1 className=\"py-2\">{props.data.celsius}&deg;</h1>\r\n        {minmax(props.data.tmin, props.data.tmax)}\r\n        <h4 className=\"py-3\">{props.data.desc}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction minmax(min, max) {\r\n  return (\r\n    <h3>\r\n      <span className=\"px-4\">{max}&deg;</span>\r\n      <span className=\"px-4\">{min}&deg;</span>\r\n    </h3>\r\n  );\r\n}\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\r\nimport \"./form.style.css\";\r\nconst Form = (props) => {\r\n  return (\r\n    <div className=\"row\">\r\n      <form onSubmit={props.getW}>\r\n        <div className=\"col-md-3\">\r\n          <div>{props.error ? \"enter proper data\" : null}</div>\r\n          <input\r\n            name=\"city\"\r\n            type=\"text\"\r\n            placeholder=\"Enter City, Ex:- Hyderabad\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <input\r\n            name=\"country\"\r\n            type=\"text\"\r\n            placeholder=\"Enter Country, Ex:- India\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <button type=\"submit\" className=\"btn btn-warning\">\r\n            Get Weather\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Weather from \"./components/weather\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport Form from \"./components/form\";\nconst apiKey = \"1b2f1a3f39a1f6cc4b7f38d86c7f0107\";\nconst url = \"api.openweathermap.org/data/2.5/weather?q=London,uk\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      tmax: undefined,\n      tmin: undefined,\n      desc: \"\",\n      error: false,\n    };\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\",\n    };\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: \"wi display-1 \" + icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: \"wi display-1 \" + icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: \"wi display-1 \" + icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: \"wi display-1 \" + icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: \"wi display-1 \" + icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: \"wi display-1 \" + icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: \"wi display-1 \" + icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: \"wi display-1 \" + icons.Clouds });\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const c = e.target.elements.city.value;\n    const con = e.target.elements.country.value;\n    if (c && con) {\n      const apiData = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${c},${con}&appid=1b2f1a3f39a1f6cc4b7f38d86c7f0107`\n      );\n      const jdata = await apiData.json();\n      this.setState({\n        city: jdata.name,\n        country: jdata.sys.country,\n        celsius: (jdata.main.temp - 273.5).toFixed(2),\n        tmax: (jdata.main.temp_max - 273.5).toFixed(2),\n        tmin: (jdata.main.temp_min - 273.5).toFixed(2),\n        desc: jdata.weather[0].description,\n        error: false,\n      });\n      this.get_WeatherIcon(this.weatherIcon, jdata.weather[0].id);\n    } else {\n      this.setState({ error: true });\n    }\n  };\n\n  render() {\n    const { city, country } = this.state;\n    return (\n      <div className=\"App\">\n        <Form getW={this.getWeather} error={this.state.error} />\n        <Weather data={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}